// interfaces/index.ts

// Data structure for Geo location
export interface Geo {
  lat: string;
  lng: string;
}

// Data structure for Address
export interface Address {
  street: string;
  suite: string;
  city: string;
  zipcode: string;
  geo: Geo;
}

// Data structure for Company
export interface Company {
  name: string;
  catchPhrase: string;
  bs: string;
}

// Data structure for a User - based on Task 5 instructions
export interface UserData {
  id: number; // Will be assigned by the parent component when adding a new user
  name: string;
  username: string;
  email: string;
  address: Address;
  phone: string;
  website: string;
  company: Company;
  posts?: PostData[]; // Optional: if you're still linking posts to users
}

// Props for the main Users page component
export interface UsersPageProps {
  users: UserData[];
}

// Props for the UserModal component
export interface UserModalProps {
  onClose: () => void;
  // onSubmit will receive UserData without an ID, as ID is generated by the parent
  onSubmit: (user: Omit<UserData, 'id' | 'posts'>) => void;
}

// --- Other Interfaces (e.g., for Posts, if still used) ---

// Data structure for a Post
export interface PostData {
  userId: number;
  id: number;
  title: string;
  body: string;
}

// Props for the PostModal component (if you have one)
export interface PostModalProps {
  onClose: () => void;
  onSubmit: (post: Omit<PostData, 'id' | 'userId'>, userId: number) => void; // Example signature
}

// Props for the UserCard component (assuming it takes a single user's data)
// This is essentially UserData, but UserCard might not deal with 'id' or 'posts' directly
export interface UserCardComponentProps {
 user: UserData; // UserCard will display this user's details
 expanded?: boolean;
 onToggle?: () => void;
}
